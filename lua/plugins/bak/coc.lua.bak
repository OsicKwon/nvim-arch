return {
	"neoclide/coc.nvim",
	branch = "release",
	build = "yarn install --frozen-lockfile",
	config = function()
		-- Some example coc.nvim configurations
		vim.g.coc_global_extensions = {
			'coc-json',
			'coc-tsserver',
			-- Add other coc extensions you want to use
			'coc-pyright',
		}

		-- Use tab for trigger completion with characters ahead and navigate
		local opts = {silent = true, noremap = true, expr = true, replace_keycodes = false}
		vim.keymap.set("i", "<TAB>", 'coc#pum#visible() ? coc#pum#next(1) : v:lua.check_back_space() ? "<TAB>" : coc#refresh()', opts)
		vim.keymap.set("i", "<S-TAB>", [[coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"]], opts)

		-- Make <CR> auto-select the first completion item and notify coc.nvim to
		-- format on enter, <cr> could be remapped by other vim plugin
		vim.keymap.set("i", "<cr>", [[coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"]], opts)

		-- Use `[g` and `]g` to navigate diagnostics
		vim.keymap.set("n", "[g", "<Plug>(coc-diagnostic-prev)", {silent = true})
		vim.keymap.set("n", "]g", "<Plug>(coc-diagnostic-next)", {silent = true})

		-- GoTo code navigation
		-- vim.keymap.set("n", "gd", "<Plug>(coc-definition)", {silent = true})
		vim.keymap.set("n", "gy", "<Plug>(coc-type-definition)", {silent = true})
		vim.keymap.set("n", "gi", "<Plug>(coc-implementation)", {silent = true})
		vim.keymap.set("n", "gr", "<Plug>(coc-references)", {silent = true})

		-- Use K to show documentation in preview window
		function _G.show_docs()
			local cw = vim.fn.expand('<cword>')
			if vim.fn.index({'vim', 'help'}, vim.bo.filetype) >= 0 then
				vim.api.nvim_command('h ' .. cw)
			elseif vim.api.nvim_eval('coc#rpc#ready()') then
				vim.fn.CocActionAsync('doHover')
			else
				vim.api.nvim_command('!' .. vim.o.keywordprg .. ' ' .. cw)
			end
		end
		vim.keymap.set("n", "K", '<CMD>lua _G.show_docs()<CR>', {silent = true})
	end,
}
